var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/prologue/introduction/",title:"What is the USB Nugget?",description:"Meet the USB RubberNugget: A cat-shaped USB attack platform!",content:` The USB Nugget is a cute, powerful HID attack platform that features a screen, buttons, and Wi-Fi support for flexible payload deployment created by Kody Kinzie and Alex Lynd. Run and edit payloads over Wi-Fi from mobile and desktop devices, or use the quick-select menu to launch payloads at the press of a button. Watch each command execute in real time on the built-in screen, and get instant feedback on your attack from the built-in LED. The USB Nugget mounts as a USB flash drive when plugged into your computer, making it easy to drag and drop multiple payloads to the onboard storage. Getting Started # ⛔️ Update to the lastest firmware before using your USB Nugget! Want to see the USB Nugget in action? Watch Alex use the PwnKit payload on the RubberNugget:
Guides: Jump right in # Follow our handy guides to get started on the basics as quickly as possible: Recommended Tutorials 💻 Update Your USB Nugget with Chrome Browser 🛠 Writing Your First Payload ⚙️ Loading Payloads on the Nugget
Fundamentals: Dive a little deeper # Learn the fundamentals of the USB Nugget to get a deeper understanding of our main features: Recommended Tutorials 🖥 Wi-Fi Interface 📡 Live Control 🐍 Set Up CircuitPython ⚙️ Set Up Arduino
`}),e.add({id:1,href:"/docs/guides/update-with-chrome/",title:"Update Your USB Nugget with Chrome Browser",description:"Flash your RubberNugget with the latest firmware",content:` ℹ️ Update First: The USB Nugget is updated frequently. Get the latest version to ensure you have access to new features \u0026 bug fixes! Before you start hacking with your USB Nugget, make sure to update it to the latest firmware.
To update your USB Nugget, you will need:
A USB type C cable that supports data The Google Chrome web browser The latest USB Nugget firmware .BIN file Flashing Via Chrome Browser # The easiest way to flash your USB Nugget is via the Chrome web browser. First, remove any case and unplug your Nugget.
Step 1: Visit the release page \u0026amp; download the most recent .BIN file.
Step 2: On the back of your Nugget, locate the \u0026ldquo;0\u0026rdquo; button \u0026amp; hold it down.
Step 3: Plug the Nugget into your computer with a USB cable \u0026amp; then release the \u0026ldquo;0\u0026rdquo; button.
This puts the nugget into flashing mode.
If you have issues with step 5, try holding down the \u0026ldquo;0\u0026rdquo; button, tapping the \u0026ldquo;RST\u0026rdquo; button, and then releasing the \u0026ldquo;0\u0026rdquo; button to enter flashing mode instead.
Step 4: In a Chrome browser window, navigate to https://nabucasa.github.io/esp-web-flasher/
Currently, Firefox and other browsers do not support WebSerial.
Step 5: Click the \u0026ldquo;Connect\u0026rdquo; button \u0026amp; select the \u0026ldquo;ESP32-S2\u0026rdquo; board.
Step 6: Once connected, click \u0026ldquo;Erase\u0026rdquo; \u0026amp; confirm.
Step 7: After the erase is finished, click \u0026ldquo;Choose a file\u0026rdquo; \u0026amp; select the .BIN file from step 1.
Step 8: Click \u0026ldquo;Program\u0026rdquo; \u0026amp; wait for the .BIN to flash, then unplug to complete the update.
That\u0026rsquo;s it! Your Nugget is ready to hack. # Plug in your USB Nugget and watch it mount as a flash drive. You can open the drive to explore preinstalled payloads and begin to add your own.
You can also connect via the web interface and run payloads from any device! The network name is RubberNugget and the password is nugget123 to connect. Once connected, navigate to 192.168.4.1 in a browser.
`}),e.add({id:2,href:"/docs/fundamentals/wi-fi-interface/",title:"Wi-Fi Interface",description:"Connect to your Nugget from any browser",content:"The USB Nugget creates a Wi-Fi interface that enables remote access. Accessing it is easy! Step 1: Locate the \u0026ldquo;RubberNugget\u0026rdquo; Wi-Fi network # Step 2: Connect with password \u0026ldquo;nugget123\u0026rdquo; # Step 3: Once connected, navigate to 192.168.4.1 in a browser # You\u0026rsquo;re connected! You can edit, run, and delete payloads from your browser. # "}),e.add({id:3,href:"/docs/prologue/",title:"Getting Started",description:"Prologue Doks.",content:""}),e.add({id:4,href:"/docs/guides/",title:"Guides",description:"Guides for the USB Nugget",content:""}),e.add({id:5,href:"/docs/prologue/quick-start/",title:"Quick Start",description:"Get started with the USB Nugget",content:` ⛔️ Update to the lastest firmware before using your USB Nugget! Want to see the USB Nugget in action? Watch Alex use the PwnKit payload on the RubberNugget:
Guides: Jump right in # Follow our handy guides to get started on the basics as quickly as possible: Recommended Tutorials 💻 Update Your USB Nugget with Chrome Browser 🛠 Writing Your First Payload ⚙️ Loading Payloads on the Nugget
Fundamentals: Dive a little deeper # Learn the fundamentals of the USB Nugget to get a deeper understanding of our main features: Recommended Tutorials 🖥 Wi-Fi Interface 📡 Live Control 🐍 Set Up CircuitPython ⚙️ Set Up Arduino
`}),e.add({id:6,href:"/docs/fundamentals/live-control/",title:"Live Control",description:"Run Commands live",content:`The USB Nugget supports live command both through a web interface and via a web API.
Web Interface # To access the web interface and run payloads live, connect to the USB Nugget\u0026rsquo;s Wi-Fi access point and visit http://192.168.4.1/create.html
From this page, you can create, run, and save payloads to your USB Nugget. Python Script # If you want to use a script to send Nugget Script commands or files to your USB Nugget, the following scripts will help you get started. The following simple Python script can be used to send individual Nugget Script commands from your computer while connected to the RubberNugget\u0026rsquo;s Wi-Fi network.
import requests, base64 url = 'http://192.168.4.1/runlive.php' while True: pew = input(\u0026quot;Enter command:\\n\u0026quot;) try: requests.post(url, base64.b64encode(pew.encode())) except: print(\u0026quot;Sent\u0026quot;) If you want to sent entire Nugget Script payloads, you can use the following short script to send .TXT files.
import requests, base64 url = 'http://192.168.4.1/runlive.php' while True: pew = input(\u0026quot;Enter path to Nugget Script File:\\n\u0026quot;) file = open(pew, \u0026quot;r\u0026quot;) payload = file.read() try: requests.post(url, base64.b64encode(payload.encode())) except: pew = input(\u0026quot;Sent, press enter to send another:\\n\u0026quot;) `}),e.add({id:7,href:"/docs/guides/update-with-esptool/",title:"Update Your USB Nugget with ESPtool",description:"Flash your RubberNugget via the command line",content:` ℹ️ Update First: The USB Nugget is updated frequently. Get the latest version to ensure you have access to new features \u0026 bug fixes! If you\u0026rsquo;re more comfortable in the command line (or just hate using Chrome), you can also update your nugget using ESPtool.
Step 1: Visit the release page \u0026amp; download the most recent .BIN file.
Step 2: On the back of your Nugget, locate the \u0026ldquo;0\u0026rdquo; button \u0026amp; hold it down.
Step 3: Plug the Nugget into your computer with a USB cable \u0026amp; then release the \u0026ldquo;0\u0026rdquo; button.
This puts the nugget into flashing mode. If you have issues with step 5, try holding down the \u0026ldquo;0\u0026rdquo; button, tapping the \u0026ldquo;RST\u0026rdquo; button, and then releasing the \u0026ldquo;0\u0026rdquo; button to enter flashing mode instead.
Step 4: Find the serial port your Nugget is connected to. Run the command below to erase the flash of your Nugget, making sure to replace \u0026ldquo;SERIAL_PORT\u0026rdquo; with the port the serial port your Nugget is connected to.
Windows Found via Device Manager
MacOS ls /dev/cu* Linux ls /dev/tty* Step 5: Erase the Nugget\u0026rsquo;s flash memory
Make sure to replace SERIAL_PORT, with the serial port of your Nugget.
Windows esptool --chip esp32s2 -p SERIAL_PORT erase_flash Mac esptool.py --chip esp32s2 -p SERIAL_PORT erase_flash Linux esptool.py --chip esp32s2 -p SERIAL_PORT erase_flash Step 6: Flash the new firmware .BIN file
After erasing is complete, run the following command, making sure to replace SERIAL_PORT with the port your Nugget is on, and UPDATE.BIN with the update file.
Windows esptool --chip esp32s2 -p SERIAL_PORT write_flash -z 0x1000 UPDATE.BIN Mac esptool.py --chip esp32s2 -p SERIAL_PORT write_flash -z 0x1000 UPDATE.BIN Linux esptool.py --chip esp32s2 -p SERIAL_PORT write_flash -z 0x1000 UPDATE.BIN Once flashing is finished, unplug your Nugget to complete the update.
That\u0026rsquo;s it! Your Nugget is ready to hack. # Plug in your USB Nugget and watch it mount as a flash drive. You can open the drive to explore preinstalled payloads and begin to add your own.
You can also connect via the web interface and run payloads from any device! The network name is RubberNugget and the password is nugget123 to connect. Once connected, navigate to 192.168.4.1 in a browser.
`}),e.add({id:8,href:"/docs/advanced-projects/wi-fi-sniffing/",title:"Wi-Fi Sniffing",description:"Sniff \u0026 Parse Wi-Fi Packets with CircuitPython",content:` ⛔️ Warning: This will erase your current USB Nugget installation, and you'll need to update your USB Nugget again before using it as a USB attack platform. The USB Nugget hardware can sniff Wi-Fi packets, allowing hackers to hunt for particular Wi-Fi devices or write packet filters to display deauthentication packets. To get started, you\u0026rsquo;ll need to install CircuitPython on your Nugget, as shown here. After installing CircuitPython, you can check out the guide below to start parsing Wi-Fi packets on your Nugget:
`}),e.add({id:9,href:"/docs/fundamentals/circuit-python/",title:"Set up CircuitPython",description:"Use Python on Microcontrollers!",content:`While not installed by default, the USB Nugget supports flashing with CircuitPython, a beginner-friendly programming language for microcontrollers based on Python maintained by Adafruit. You can set up CircuitPython on your USB Nugget by following the video below.
⛔️ Warning: This will erase your current USB Nugget installation, and you'll need to update your USB Nugget again before using it as a USB attack platform Thank you to Adafruit for including excellent documentation for setting up CircuitPython, some of which is copied below.
Step 1: Set up the bootloader to enable USB support # To set up CircuitPython on the S2 Nugget, navigate here: https://circuitpython.org/board/lolin_s2_mini/
Go to the section that says \u0026ldquo;Install, Repair, or Update UF2 Bootloader\u0026rdquo; and click the purple \u0026ldquo;Download bootloader ZIP\u0026rdquo; at the bottom.
Plug board into a USB port on your computer using a data/sync cable. Make sure it is the only board plugged in, and that a charge-only cable is not being used.
Press and hold down the BOOT or 0 button, press and release the RESET or RST button, and then release the BOOT button.
In the Chrome browser, navigate to: https://adafruit.github.io/Adafruit_WebSerial_ESPTool/
Select 460800 Baud from the pull-down menu (top-right).
Click Connect (top-right).
Select the COM or Serial port from the pop-up window.
After successful connection, click Erase.
After successful erase, click any Choose a file\u0026hellip;, then locate and select the combined.bin file unzipped earlier.
After successfully choosing combined.bin, click Program.
After the TinyUF2 firmware update is complete, press the RESET button on the board. A new drive BOOT should be visible in your file browser.
Step 2: Install CircuitPython # Go back to https://circuitpython.org/board/lolin_s2_mini/ and download the .UF2 file for the latest stable version of CircuitPython.
Once the .UF2 file downloads, drag and drop it into the drive that appears when you plug in your S2 Nugget.
This should automatically install CircuitPython on your S2 Nugget!
Step 3: Programming in CircuitPython # Download and install Mu Editor from here: https://codewith.mu/
Open Mu editor and select CircuitPython editing mode.
Name your file code.py, this will be automatically run each time the board boots.
Save your code to the board, it will automatically re-run your code each time you save changes to it.
To add files, drag and drop them from your computer to the board.
Using the neopixel # In Mu Editor, create a new file, name it \u0026ldquo;code.py\u0026rdquo;, and save it to your CIRCUITPY drive.
Copy or download the following script into your file: https://github.com/HakCat-Tech/S2-Nugget/blob/main/NeoPixelTest_CircuitPy_Nugget.py
At the bottom of the script (on lines 55-58), uncomment the function you\u0026rsquo;d like to test.
You can choose from:
SetAll(r,g,b) Uncomment this to test setting all neopixels to a single color (set your own values) RandomColor() Uncomment this to test setting all neopixels to random colors VividColor() Uncomment this to test setting all neopixels to vivid random colors using some math RandomChase() Uncomment this to test creating a racing animation for neopixel strips or rings Reading Wi-Fi packets # To try out Wi-Fi packet parsing, download the Wifi_Deauth_Detector_Example.zip file here: https://github.com/HakCat-Tech/S2-Nugget/blob/main/Wifi_Deauth_Detector_Example.zip
Unzip the .ZIP file, and drag and drop the contents into your CircuitPy board, overwriting the existing /lib folder and code.py
Open Code.py to see the code under the hood, otherwise the code should run and detect deauth packets with a shocked anime face.
Controlling the screen # To try loading a bitmap on the screen, download the OLED Bitmap example here: https://github.com/HakCat-Tech/S2-Nugget/blob/main/OLED_Bitmap_Example.zip
Unzip the .ZIP file, and drag and drop the contents into your CircuitPy board, overwriting the existing /lib folder and code.py
You can drag and drop black and white .BMP images that are 128X64 onto your board and display them by changing the file path in code.py
HID Attack Examples # The S2 Nugget supports HID attacks! You can pretend to be a keyboard or mouse to send keystrokes or control mouse movements.
To try out the HID attack examples, download the ZIP file here: https://github.com/HakCat-Tech/S2-Nugget/blob/main/HID_Attack_CircuitPython_Examples.zip
Unzip the .ZIP file, and drag and drop the contents into your CircuitPy board, overwriting the existing /lib folder and code.py
You\u0026rsquo;ll find 3 examples, which include:
MacOS_HID_Payload - Pretends to be a keyboard, when inserted into MacOS computer, opens a terminal window and injects a payload. Currently set to \u0026ldquo;curl parrot.live\u0026rdquo; which makes a dancing parrot appear. Uses the screen on the S2 Nugget to show the status of the payload. Simple_HID_Payload - Bare-bones HID payload to inject keystrokes, currently set for MacOS to \u0026ldquo;curl parrot.live\u0026rdquo; which makes a dancing parrot appear. Screen_Mouse_Jiggler - Turns the S2 Nugget into a mouse jiggler. When the right button is pressed, the mouse is moved randomly. On screen instructions. Simple_Mouse_Jiggler - Bare-bones mouse jiggler with no screen or neopixel indicator You can easily add payloads for your own operating system! For more CircuiptPython HID documentation, see here: https://circuitpython.readthedocs.io/projects/hid/en/latest/
To run an example, make a copy of the script and rename it \u0026ldquo;code.py\u0026rdquo;, overwriting the old \u0026ldquo;code.py\u0026rdquo; file.
Your S2 Nugget will automatically reload and run the current code.py script.
You can find a full written guide to flashing here: https://circuitpython.org/board/lolin_s2_mini/
Once you have CircuitPython installed, check out our supported project on our CircuitPython Github repository.
`}),e.add({id:10,href:"/docs/advanced-projects/ssdp-phising/",title:"SSDP Phishing",description:"Pose as network devices to phish Windows users",content:" ⛔️ Warning: This will erase your current USB Nugget installation, and you'll need to update your USB Nugget again before using it as a USB attack platform The USB Nugget can be flashed to act as a SSDP (Simple Service Discovery Protocol) device, connecting to a Wi-Fi network appearing to nearby Windows users as a network-attached drive. This attack can be used to redirect users to phishing pages when they click on the drive. We created a demo you can find here: https://github.com/HakCat-Tech/Nugget-SSDP-Phisher/raw/main/img/Nugget-SSDP.png You can check out the guide below to try the attack yourself: "}),e.add({id:11,href:"/docs/guides/write-first-payload/",title:"Writing Your First Payload",description:"Making Nugget Script Payloads on the USB Nugget",content:` The USB Nugget supports Nugget Script, making it easy to create your first payload!
If you need inspiration, you can find a list of Nugget Script payloads on the Hak5 GitHub repository.
To get started, let\u0026rsquo;s review the full list of Nugget Script commands the USB Nugget supports.
Nugget Script Payload Structure # When composing a Nugget Script payload, commands are executed line by line. It\u0026rsquo;s also possible to press multiple keys at the same time by putting commands on the same line!
To write out a piece of text, type TYPE in all caps. See the example below for how this works:
Example Result SHIFT C Type the Shift key and then the c key SHIFT C Press the Shift key and the c key at the same time TYPE Hello Types out \u0026ldquo;Hello\u0026rdquo; Built-in Commands # Now that we have the basics down, let\u0026rsquo;s take a look at supported commands:
Command Example Description // // Some comment This is used to leave comments, and is not executed in the script DEFAULTWAIT or DEFAULT_WAIT DEFAULTWAIT 200 This sets the default time in ms between each command WAIT WAIT 1000 Sets a one-time delay in ms TYPE TYPE Hello World! Types whatever string follows the command LED LED R Changes the color of the LED. Current Options: R = red, G = green, B = blue, C = cyan, Y = yellow, M = magenta, W = white SCREEN SCREEN Hello Displays the string after the command on the USB Nugget\u0026rsquo;s screen Supported Keys # Most standard keys are supported by the Rubber Nugget.
Key a-z A-Z 1-9 F1-F12 !@#\$%^\u0026amp;*()_-=+, etc Modifier Keys # Keys like SHIFT, ALT, and the WINDOWS or GUI key can be useful for accessing hotkey combinations, are are frequently used in combination key presses.
Key CTRL or CONTROL SHIFT ALT WINDOWS CMD or GUI Other Useful Keys # Virtually anything you can do behind a keyboard can be recreated with the right keypresses. The following keys are essential to trigger keyboard shortcuts and navigate without a mouse.
Key ENTER MENU or APP DELETE HOME INSERT PAGEUP PAGEDOWN UP or UPARROW DOWN or DOWNARROW LEFT or LEFTARROW RIGHT or RIGHTARROW TAB END ESC or ESCAPE SPACE PAUSE or BREAK CAPSLOCK NUMLOCK PRINTSCREEN SCROLLLOCK Now that we\u0026rsquo;ve gone over the supported Nugget Script commands, let\u0026rsquo;s load and deploy a payload to the USB Nugget.
`}),e.add({id:12,href:"/docs/guides/load-payloads/",title:"Loading Payloads on the Nugget",description:"Adding payloads via the USB and web interface",content:`The USB Nugget supports adding payloads both through the web interface and directly over USB.
To start, let\u0026rsquo;s write a simple Nugget Script payload and save it over USB.
Step 1: Write \u0026amp; Save a Simple Script
In your word processer of choice, write out a simple script and save it a plain .TXT file
GUI SPACE WAIT 100 TYPE Terminal ENTER WAIT 1000 TYPE curl parrot.live ENTER Step 2: Plug in Your USB Nugget
Once you\u0026rsquo;ve plugged in your USB Nugget with a USB type C cable that supports data transfer, it should appear on your computer as a flash drive.
The Nugget comes pre-loaded with 4 different folders to cover 3 operating systems and frequently used payloads:
Linux Mac Windows Starred payloads You can re-name these folders if you wish.
Inside each folder, you can add up to 3 sub-folders to organize your payloads by category. Each sub-folder can hold 3 payloads, for a maximum of 36 payloads total.
⛔️ You can add more than 36 payloads and still access them via the web interface, but they will not be visible via the button interface. Step 3: Drag \u0026amp; Drop Your Payload to the Nugget
We\u0026rsquo;ll drop our payload in a \u0026ldquo;Test\u0026rdquo; folder under the \u0026ldquo;Mac\u0026rdquo; operating system folder. The file structure will look like this:
USB Nugget Drive \u0026ndash;\u0026gt; Mac Folder \u0026ndash;\u0026gt; Test Folder \u0026ndash;\u0026gt; Payload.TXT
Once we drop our file onto the Nugget, we can see it by pressing the left button for the Mac folder, then selecting the \u0026ldquo;Test\u0026rdquo; folder.
Step 4: Select \u0026amp; Run Your Payload Next, we select the \u0026ldquo;Test\u0026rdquo; folder we just made by pressing the left button.
Inside the "Test" folder, we should see our payload.TXT! We can run our payload by pressing the up button.
When the payload starts executing, the LED will turn red.
You can watch each command execute on the built-in screen while the payload runs.
That\u0026rsquo;s it! We\u0026rsquo;ve created a test payload and run it on the USB Nugget using the USB interface.
`}),e.add({id:13,href:"/docs/fundamentals/arduino/",title:"Set up Arduino",description:"Work with the RubberNugget in Arduino IDE",content:`The USB Nugget software is developed in Arduino IDE, and it\u0026rsquo;s relatively easy to get set up writing code for your own Nugget.
Check our our guide below on getting your USB Nugget set up in Arduino IDE.
⛔️ Warning: This will erase your current USB Nugget installation, and you'll need to update your USB Nugget again before using it as a USB attack platform `}),e.add({id:14,href:"/docs/advanced-projects/damn-vulnerable-nugget/",title:"Damn Vulnerable Nugget",description:"Turn your Nugget into a hacking game!",content:` ⛔️ Warning: This will erase your current USB Nugget installation, and you'll need to update your USB Nugget again before using it as a USB attack platform Your USB Nugget can act as a vulnerable web application, letting you safely and legally practice webapp pentesting tools like Owasp Zap or Burpsuite! Check out the project here: https://github.com/HakCat-Tech/DamnVulnerableNug To follow along, watch the video below:
`}),e.add({id:15,href:"/docs/fundamentals/",title:"Fundamentals",description:"Fundamental Projects for the USB Nugget",content:""}),e.add({id:16,href:"/docs/advanced-projects/",title:"Advanced Projects",description:"Advanced Projects for the USB Nugget",content:""}),e.add({id:17,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""}),e.add({id:18,href:"/docs/use-cases/designers/",title:"For Designers",description:"Print a case, or design a new one.",content:`To increase the durability of the USB Nugget, we continue to develop a series of 3D printed cases to protect Nuggets from accidental damage.
You can find the files to print, modify, or remix our case designs in the case section of our GitHub repository.
`}),e.add({id:19,href:"/docs/use-cases/developers/",title:"For Developers",description:"Come hack with friends!",content:`We welcome contributions from our community! You can find the code for the USB Nugget at our GitHub repository. We welcome pull requests! Thank you for helping us make the Nugget even more powerful.
`}),e.add({id:20,href:"/docs/help/how-to-update/",title:"How to Update",description:"Keep your USB Nugget up to date with the latest firmware!",content:` 💡 Download the latest binary release on our GitHub page. Download the latest firmware # Download the latest USB Nugget binary release on our official GitHub repository. The current version is v1.1.
Flash Your Nugget # Use our online web flasher in a web browser to flash the latest firmware to your USB Nugget!
`}),e.add({id:21,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:`Other documentation # Hak5 Payload Repository Official Nugget Payloads Where can I get support? # Hak5 Discord Community GitHub Issues Learn more # Send us a message:
Twitter: @HakCat_Tech `}),e.add({id:22,href:"/docs/use-cases/support/",title:"For Support",description:"Need help? We're here!",content:`
If you\u0026rsquo;re having software or hardware problems with the USB Nugget, please open an issue on our GitHub repository. Make sure to include the following information:
Is this a bug, feature request, or feedback? What steps are needed to reproduce the issue? What is the expected result? What is supposed to happen? What is the actual result? What does the bug look like? `}),e.add({id:23,href:"/docs/use-cases/",title:"Use Cases",description:"Use Cases for the USB Nugget",content:""}),e.add({id:24,href:"/docs/",title:"Docs",description:"USB Nugget Doks",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()